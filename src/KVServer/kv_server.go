// Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package KVServer

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// We'll use a couple general exception classes
// and then we can subspecialize them if necessary
// 
// Attributes:
//  - Key
type KeyNotFound struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewKeyNotFound() *KeyNotFound {
  return &KeyNotFound{}
}


func (p *KeyNotFound) GetKey() string {
  return p.Key
}
func (p *KeyNotFound) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KeyNotFound)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KeyNotFound) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("KeyNotFound"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KeyNotFound) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KeyNotFound) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KeyNotFound(%+v)", *p)
}

func (p *KeyNotFound) Error() string {
  return p.String()
}

// Attributes:
//  - What
//  - Retryable
type ServiceException struct {
  What string `thrift:"what,1" db:"what" json:"what"`
  Retryable bool `thrift:"retryable,2" db:"retryable" json:"retryable"`
}

func NewServiceException() *ServiceException {
  return &ServiceException{}
}


func (p *ServiceException) GetWhat() string {
  return p.What
}

func (p *ServiceException) GetRetryable() bool {
  return p.Retryable
}
func (p *ServiceException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.What = v
}
  return nil
}

func (p *ServiceException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Retryable = v
}
  return nil
}

func (p *ServiceException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("what", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:what: ", p), err) }
  if err := oprot.WriteString(string(p.What)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.what (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:what: ", p), err) }
  return err
}

func (p *ServiceException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retryable", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:retryable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Retryable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.retryable (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:retryable: ", p), err) }
  return err
}

func (p *ServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
  return p.String()
}

// Attributes:
//  - Key
//  - Value
type KVObject struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewKVObject() *KVObject {
  return &KVObject{}
}


func (p *KVObject) GetKey() string {
  return p.Key
}

func (p *KVObject) GetValue() string {
  return p.Value
}
func (p *KVObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KVObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *KVObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("KVObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KVObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *KVObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVObject(%+v)", *p)
}

type KVServer interface {
  // Parameters:
  //  - Kv
  SetKey(ctx context.Context, kv *KVObject) (r bool, err error)
  // Parameters:
  //  - Key
  GetVal(ctx context.Context, key string) (r string, err error)
  // Parameters:
  //  - Key
  GetObj(ctx context.Context, key string) (r *KVObject, err error)
  // Parameters:
  //  - Key
  DelKey(ctx context.Context, key string) (err error)
}

type KVServerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewKVServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *KVServerClient {
  return &KVServerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewKVServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *KVServerClient {
  return &KVServerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Kv
func (p *KVServerClient) SetKey(ctx context.Context, kv *KVObject) (r bool, err error) {
  if err = p.sendSetKey(kv); err != nil { return }
  return p.recvSetKey()
}

func (p *KVServerClient) sendSetKey(kv *KVObject)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("set_key", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KVServerSetKeyArgs{
  Kv : kv,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KVServerClient) recvSetKey() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "set_key" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_key failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_key failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_key failed: invalid message type")
    return
  }
  result := KVServerSetKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.ServiceException != nil {
    err = result.ServiceException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Key
func (p *KVServerClient) GetVal(ctx context.Context, key string) (r string, err error) {
  if err = p.sendGetVal(key); err != nil { return }
  return p.recvGetVal()
}

func (p *KVServerClient) sendGetVal(key string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_val", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KVServerGetValArgs{
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KVServerClient) recvGetVal() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_val" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_val failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_val failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_val failed: invalid message type")
    return
  }
  result := KVServerGetValResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.KeyException != nil {
    err = result.KeyException
    return 
  } else   if result.ServiceException != nil {
    err = result.ServiceException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Key
func (p *KVServerClient) GetObj(ctx context.Context, key string) (r *KVObject, err error) {
  if err = p.sendGetObj(key); err != nil { return }
  return p.recvGetObj()
}

func (p *KVServerClient) sendGetObj(key string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_obj", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KVServerGetObjArgs{
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KVServerClient) recvGetObj() (value *KVObject, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_obj" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_obj failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_obj failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_obj failed: invalid message type")
    return
  }
  result := KVServerGetObjResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.KeyException != nil {
    err = result.KeyException
    return 
  } else   if result.ServiceException != nil {
    err = result.ServiceException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Key
func (p *KVServerClient) DelKey(ctx context.Context, key string) (err error) {
  if err = p.sendDelKey(key); err != nil { return }
  return p.recvDelKey()
}

func (p *KVServerClient) sendDelKey(key string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("del_key", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KVServerDelKeyArgs{
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KVServerClient) recvDelKey() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "del_key" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "del_key failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "del_key failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "del_key failed: invalid message type")
    return
  }
  result := KVServerDelKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type KVServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler KVServer
}

func (p *KVServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *KVServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *KVServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewKVServerProcessor(handler KVServer) *KVServerProcessor {

  self8 := &KVServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["set_key"] = &kVServerProcessorSetKey{handler:handler}
  self8.processorMap["get_val"] = &kVServerProcessorGetVal{handler:handler}
  self8.processorMap["get_obj"] = &kVServerProcessorGetObj{handler:handler}
  self8.processorMap["del_key"] = &kVServerProcessorDelKey{handler:handler}
return self8
}

func (p *KVServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type kVServerProcessorSetKey struct {
  handler KVServer
}

func (p *kVServerProcessorSetKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KVServerSetKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_key", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KVServerSetKeyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SetKey(ctx, args.Kv); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.ServiceException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_key: " + err2.Error())
    oprot.WriteMessageBegin("set_key", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("set_key", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type kVServerProcessorGetVal struct {
  handler KVServer
}

func (p *kVServerProcessorGetVal) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KVServerGetValArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_val", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KVServerGetValResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetVal(ctx, args.Key); err2 != nil {
  switch v := err2.(type) {
    case *KeyNotFound:
  result.KeyException = v
    case *ServiceException:
  result.ServiceException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_val: " + err2.Error())
    oprot.WriteMessageBegin("get_val", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_val", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type kVServerProcessorGetObj struct {
  handler KVServer
}

func (p *kVServerProcessorGetObj) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KVServerGetObjArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_obj", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KVServerGetObjResult{}
var retval *KVObject
  var err2 error
  if retval, err2 = p.handler.GetObj(ctx, args.Key); err2 != nil {
  switch v := err2.(type) {
    case *KeyNotFound:
  result.KeyException = v
    case *ServiceException:
  result.ServiceException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_obj: " + err2.Error())
    oprot.WriteMessageBegin("get_obj", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_obj", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type kVServerProcessorDelKey struct {
  handler KVServer
}

func (p *kVServerProcessorDelKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KVServerDelKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("del_key", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KVServerDelKeyResult{}
  var err2 error
  if err2 = p.handler.DelKey(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing del_key: " + err2.Error())
    oprot.WriteMessageBegin("del_key", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("del_key", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Kv
type KVServerSetKeyArgs struct {
  Kv *KVObject `thrift:"kv,1" db:"kv" json:"kv"`
}

func NewKVServerSetKeyArgs() *KVServerSetKeyArgs {
  return &KVServerSetKeyArgs{}
}

var KVServerSetKeyArgs_Kv_DEFAULT *KVObject
func (p *KVServerSetKeyArgs) GetKv() *KVObject {
  if !p.IsSetKv() {
    return KVServerSetKeyArgs_Kv_DEFAULT
  }
return p.Kv
}
func (p *KVServerSetKeyArgs) IsSetKv() bool {
  return p.Kv != nil
}

func (p *KVServerSetKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerSetKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Kv = &KVObject{}
  if err := p.Kv.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kv), err)
  }
  return nil
}

func (p *KVServerSetKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerSetKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kv", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kv: ", p), err) }
  if err := p.Kv.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kv), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kv: ", p), err) }
  return err
}

func (p *KVServerSetKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerSetKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServiceException
type KVServerSetKeyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  ServiceException *ServiceException `thrift:"service_exception,1" db:"service_exception" json:"service_exception,omitempty"`
}

func NewKVServerSetKeyResult() *KVServerSetKeyResult {
  return &KVServerSetKeyResult{}
}

var KVServerSetKeyResult_Success_DEFAULT bool
func (p *KVServerSetKeyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return KVServerSetKeyResult_Success_DEFAULT
  }
return *p.Success
}
var KVServerSetKeyResult_ServiceException_DEFAULT *ServiceException
func (p *KVServerSetKeyResult) GetServiceException() *ServiceException {
  if !p.IsSetServiceException() {
    return KVServerSetKeyResult_ServiceException_DEFAULT
  }
return p.ServiceException
}
func (p *KVServerSetKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KVServerSetKeyResult) IsSetServiceException() bool {
  return p.ServiceException != nil
}

func (p *KVServerSetKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerSetKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *KVServerSetKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ServiceException = &ServiceException{}
  if err := p.ServiceException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceException), err)
  }
  return nil
}

func (p *KVServerSetKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerSetKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KVServerSetKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceException() {
    if err := oprot.WriteFieldBegin("service_exception", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:service_exception: ", p), err) }
    if err := p.ServiceException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:service_exception: ", p), err) }
  }
  return err
}

func (p *KVServerSetKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerSetKeyResult(%+v)", *p)
}

// Attributes:
//  - Key
type KVServerGetValArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewKVServerGetValArgs() *KVServerGetValArgs {
  return &KVServerGetValArgs{}
}


func (p *KVServerGetValArgs) GetKey() string {
  return p.Key
}
func (p *KVServerGetValArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerGetValArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KVServerGetValArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_val_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerGetValArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KVServerGetValArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerGetValArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - KeyException
//  - ServiceException
type KVServerGetValResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  KeyException *KeyNotFound `thrift:"key_exception,1" db:"key_exception" json:"key_exception,omitempty"`
  ServiceException *ServiceException `thrift:"service_exception,2" db:"service_exception" json:"service_exception,omitempty"`
}

func NewKVServerGetValResult() *KVServerGetValResult {
  return &KVServerGetValResult{}
}

var KVServerGetValResult_Success_DEFAULT string
func (p *KVServerGetValResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return KVServerGetValResult_Success_DEFAULT
  }
return *p.Success
}
var KVServerGetValResult_KeyException_DEFAULT *KeyNotFound
func (p *KVServerGetValResult) GetKeyException() *KeyNotFound {
  if !p.IsSetKeyException() {
    return KVServerGetValResult_KeyException_DEFAULT
  }
return p.KeyException
}
var KVServerGetValResult_ServiceException_DEFAULT *ServiceException
func (p *KVServerGetValResult) GetServiceException() *ServiceException {
  if !p.IsSetServiceException() {
    return KVServerGetValResult_ServiceException_DEFAULT
  }
return p.ServiceException
}
func (p *KVServerGetValResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KVServerGetValResult) IsSetKeyException() bool {
  return p.KeyException != nil
}

func (p *KVServerGetValResult) IsSetServiceException() bool {
  return p.ServiceException != nil
}

func (p *KVServerGetValResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerGetValResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *KVServerGetValResult)  ReadField1(iprot thrift.TProtocol) error {
  p.KeyException = &KeyNotFound{}
  if err := p.KeyException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.KeyException), err)
  }
  return nil
}

func (p *KVServerGetValResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServiceException = &ServiceException{}
  if err := p.ServiceException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceException), err)
  }
  return nil
}

func (p *KVServerGetValResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_val_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerGetValResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KVServerGetValResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetKeyException() {
    if err := oprot.WriteFieldBegin("key_exception", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key_exception: ", p), err) }
    if err := p.KeyException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.KeyException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key_exception: ", p), err) }
  }
  return err
}

func (p *KVServerGetValResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceException() {
    if err := oprot.WriteFieldBegin("service_exception", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:service_exception: ", p), err) }
    if err := p.ServiceException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:service_exception: ", p), err) }
  }
  return err
}

func (p *KVServerGetValResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerGetValResult(%+v)", *p)
}

// Attributes:
//  - Key
type KVServerGetObjArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewKVServerGetObjArgs() *KVServerGetObjArgs {
  return &KVServerGetObjArgs{}
}


func (p *KVServerGetObjArgs) GetKey() string {
  return p.Key
}
func (p *KVServerGetObjArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerGetObjArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KVServerGetObjArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_obj_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerGetObjArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KVServerGetObjArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerGetObjArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - KeyException
//  - ServiceException
type KVServerGetObjResult struct {
  Success *KVObject `thrift:"success,0" db:"success" json:"success,omitempty"`
  KeyException *KeyNotFound `thrift:"key_exception,1" db:"key_exception" json:"key_exception,omitempty"`
  ServiceException *ServiceException `thrift:"service_exception,2" db:"service_exception" json:"service_exception,omitempty"`
}

func NewKVServerGetObjResult() *KVServerGetObjResult {
  return &KVServerGetObjResult{}
}

var KVServerGetObjResult_Success_DEFAULT *KVObject
func (p *KVServerGetObjResult) GetSuccess() *KVObject {
  if !p.IsSetSuccess() {
    return KVServerGetObjResult_Success_DEFAULT
  }
return p.Success
}
var KVServerGetObjResult_KeyException_DEFAULT *KeyNotFound
func (p *KVServerGetObjResult) GetKeyException() *KeyNotFound {
  if !p.IsSetKeyException() {
    return KVServerGetObjResult_KeyException_DEFAULT
  }
return p.KeyException
}
var KVServerGetObjResult_ServiceException_DEFAULT *ServiceException
func (p *KVServerGetObjResult) GetServiceException() *ServiceException {
  if !p.IsSetServiceException() {
    return KVServerGetObjResult_ServiceException_DEFAULT
  }
return p.ServiceException
}
func (p *KVServerGetObjResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KVServerGetObjResult) IsSetKeyException() bool {
  return p.KeyException != nil
}

func (p *KVServerGetObjResult) IsSetServiceException() bool {
  return p.ServiceException != nil
}

func (p *KVServerGetObjResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerGetObjResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &KVObject{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *KVServerGetObjResult)  ReadField1(iprot thrift.TProtocol) error {
  p.KeyException = &KeyNotFound{}
  if err := p.KeyException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.KeyException), err)
  }
  return nil
}

func (p *KVServerGetObjResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServiceException = &ServiceException{}
  if err := p.ServiceException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceException), err)
  }
  return nil
}

func (p *KVServerGetObjResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_obj_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerGetObjResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KVServerGetObjResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetKeyException() {
    if err := oprot.WriteFieldBegin("key_exception", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key_exception: ", p), err) }
    if err := p.KeyException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.KeyException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key_exception: ", p), err) }
  }
  return err
}

func (p *KVServerGetObjResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceException() {
    if err := oprot.WriteFieldBegin("service_exception", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:service_exception: ", p), err) }
    if err := p.ServiceException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:service_exception: ", p), err) }
  }
  return err
}

func (p *KVServerGetObjResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerGetObjResult(%+v)", *p)
}

// Attributes:
//  - Key
type KVServerDelKeyArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewKVServerDelKeyArgs() *KVServerDelKeyArgs {
  return &KVServerDelKeyArgs{}
}


func (p *KVServerDelKeyArgs) GetKey() string {
  return p.Key
}
func (p *KVServerDelKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerDelKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KVServerDelKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerDelKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KVServerDelKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerDelKeyArgs(%+v)", *p)
}

type KVServerDelKeyResult struct {
}

func NewKVServerDelKeyResult() *KVServerDelKeyResult {
  return &KVServerDelKeyResult{}
}

func (p *KVServerDelKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVServerDelKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVServerDelKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVServerDelKeyResult(%+v)", *p)
}


